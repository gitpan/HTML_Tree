.\"
.\"	HTML Tree
.\"	HTML_Node.3
.\"
.\"	Copyright (C) 1999  Paul J. Lucas
.\"
.\"	This program is free software; you can redistribute it and/or modify
.\"	it under the terms of the GNU General Public License as published by
.\"	the Free Software Foundation; either version 2 of the License, or
.\"	(at your option) any later version.
.\" 
.\"	This program is distributed in the hope that it will be useful,
.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"	GNU General Public License for more details.
.\" 
.\"	You should have received a copy of the GNU General Public License
.\"	along with this program; if not, write to the Free Software
.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.\" ---------------------------------------------------------------------------
.\" define code-start macro
.de cS
.sp
.nf
.RS 5
.ft CW
.ta .5i 1i 1.5i 2i 2.5i 3i 3.5i 4i 4.5i 5i 5.5i
..
.\" define code-end macro
.de cE
.ft 1
.RE
.fi
.sp
..
.\" ---------------------------------------------------------------------------
.TH \f3HTML_Node\f1 3 "March 19, 2000" "HTML Tree"
.SH NAME
\f(CWHTML_Node\fP \- Abstract base class for nodes in an HTML tree
.SH SYNOPSIS
.ft CW
.nf
class Parent_Node;

class HTML_Node {
public:
	class visitor {
	public:
		virtual ~visitor();
		virtual bool operator()(
			HTML_Node*, int depth, bool is_end_tag
		) const = 0;
	};

	virtual ~HTML_Node();

	Parent_Node*	parent() const;
	void			parent( Parent_Node *new_parent );
	virtual void	visit( visitor const&, int depth = 0 );
protected:
	HTML_Node( Parent_Node *parent = 0 );
};

Parent_Node*	parse_html_file( file_vector const& );
.fi
.ft 1
.SH DESCRIPTION
\f(CWHTML_Node\f1
is an abstract base class for nodes in an HTML tree
that was built by parsing an HTML file
into a tree structure like the HTML DOM (Document Object Model).
Once built, the nodes of the tree (elements and text from the HTML file)
can be traversed by a user-defined
.I visitor
class.
.SS "Public Interface"
.IP "\f(CWParent_Node* parent() const\fP"
Returns a pointer to the current parent node for this node,
or null if this node has no parent.
.IP "\f(CWvoid parent( Parent_Node *new_parent )\fP"
If this node already has a parent that is not the current parent,
this node is first removed from that parent's list of child nodes.
Then, this node's parent node is set to \f(CWnew_value\f1.
If \f(CWnew_parent\f1 is not null,
adds this node to the parent's list of child nodes.
.IP "\f(CWvirtual void visit( visitor const&, int depth = 0 )\fP"
Performs an in-order tree traversal starting at this node.
For each node,
the visitor's \f(CWoperator()\fP is called once.
.SS "Protected Interface"
.IP "\f(CWHTML_Node( Parent_Node *parent = 0 )\fP"
Default constructor.
If \f(CWparent\f1 is not null,
sets the parent and adds this node to that parent's list of child nodes.
.SS "Global Functions"
.IP "\f(CWParent_Node* parse_html_file( file_vector const& )\fP"
Parses the given HTML file into an HTML tree
and returns a pointer to the root node of an HTML tree.
.SH "The Visitor Class"
\f(CWHTML_Node::visitor\fP
is an abstract base class for object that ``visit'' nodes.
.SS "Public Interface"
.IP "\f(CWvirtual ~visitor()\fP"
Destructor.
It does nothing.
It's defined only to ensure it's virtual
as it should be for an abstract base class.
.IP "\f(CWvirtual bool operator()( HTML_Node*, int depth, bool is_end_tag )\fP"
The visit function.
A derived class
.B must
override this since it's pure virtual.
The \f(CWdepth\f1 indicates how ``deep'' the current node is in the tree.
Depths start at zero.
The \f(CWis_end_tag\f1 argument is not used by \f(CWHTML_Node\f1,
so it always passes \f(CWfalse\f1.
.SH EXAMPLE
The following example ``pretty prints'' and HTML file:
.cS
class pretty_printer : public HTML_Node::visitor {
public:
	bool operator()( HTML_Node*, int depth, bool is_end_tag ) const;
};

bool pretty_printer::operator()(
	HTML_Node *node, int depth, bool is_end_tag
) const {
	while ( depth-- > 0 )
		cout << "    ";

	if ( Text_Node *const t = dynamic_cast< Text_Node* >( node ) ) {
		cout << t->text << endl;
		return true;
	}

	Element_Node *const e = dynamic_cast< Element_Node* >( node );
	if ( is_end_tag ) {
		cout << "</" << e->name() << ">\\n";
		return false;
	}

	cout << '<' << e->name();

	for ( Element_Node::attribute_map::const_iterator
		att  = e->attributes.begin();
		att != e->attributes.end(); ++att
	)
		cout << ' ' << att->first << "=\\"" << att->second << '"';
	cout << ">\\n";
	return true;
}
.cE
.SH SEE ALSO
.BR Element_Node (3),
.BR file_vector (3),
.BR Parent_Node (3),
.BR Text_Node (3).
.PP
World Wide Web Consortium Document Object Model Working Group.
.I Document Object Model,
December 1998.
.RS
http://www.w3.org/DOM/
.RE
.SH AUTHOR
Paul J. Lucas
.RI < pjl@best.com >
.SH HISTORY
The HTML parser is derived from code in SWISH++,
a really fast file indexing and searching engine
(also by the author).
.RS
http://www.best.com/~pjl/software/swish/
.RE
